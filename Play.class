package com.Shashank.BlockRunner.Play;

import static com.Shashank.BlockRunner.handelers.B2DVars.PPM;

import com.Shashank.BlockRunner.Main.Game;
import com.Shashank.BlockRunner.States.GameState;
import com.Shashank.BlockRunner.handelers.B2DVars;
import com.Shashank.BlockRunner.handelers.GameStateManager;
import com.Shashank.BlockRunner.handelers.MyContactListener;
import com.Shashank.BlockRunner.handelers.MyInput;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.Box2DDebugRenderer;
import com.badlogic.gdx.physics.box2d.CircleShape;
import com.badlogic.gdx.physics.box2d.Fixture;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;

public class Play extends GameState{
	
	private World world;
	private Box2DDebugRenderer b2dr;
	private Body playerBody;
	private Body barrier;
	private OrthographicCamera b2dcam;
	private MyContactListener cl;
	
	private BitmapFont font = new BitmapFont();
	private int i = 0;
	
		//Static body - unaffected by forces and cannot move
		
		//Kenematic body - unaffected by forces
		
		//Dynamic body- Gets Affected by forces
	
	public Play(GameStateManager gsm){
		super(gsm);
		world = new World(new Vector2(0,-9.8f) ,true );
		world.setContactListener(cl = new MyContactListener());
		b2dr = new Box2DDebugRenderer();
		
		//Create Platform///////////////////////////////////////////////////////////////////////////////////////////
		BodyDef bdef = new BodyDef();
		bdef.position.set(160/PPM,120/PPM);
		bdef.type = BodyType.StaticBody;
		Body body = world.createBody(bdef);
		

		
		PolygonShape shape = new PolygonShape();
		FixtureDef fdef = new FixtureDef();

		
		shape.setAsBox(500000/PPM, 5/PPM);
		fdef.shape  = shape;
		fdef.filter.categoryBits = B2DVars.BIT_GROUND;                 
		fdef.filter.maskBits = B2DVars.BIT_PLAYER | B2DVars.BIT_BARRIER;	
		body.createFixture(fdef).setUserData("GROUND");
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		//Create Player
		bdef.position.set(160/PPM,200/PPM);
		bdef.type = BodyType.DynamicBody;
		playerBody = world.createBody(bdef);
		
		shape.setAsBox(5/PPM,5/PPM);
		fdef.shape = shape;
		//fdef.restitution = 1f;
		fdef.filter.categoryBits = B2DVars.BIT_PLAYER;
		fdef.filter.maskBits = B2DVars.BIT_GROUND;
		playerBody.createFixture(fdef).setUserData("Player");
		
		
		//create foot sensor
		shape.setAsBox(2/PPM, 2/PPM,new Vector2(0,-5/PPM),0);
		fdef.shape = shape;
		fdef.filter.categoryBits = B2DVars.BIT_PLAYER;
		fdef.filter.maskBits = B2DVars.BIT_GROUND;
		fdef.isSensor = true;
		playerBody.createFixture(fdef).setUserData("Foot");
		
	
		
		bdef.position.set(160/PPM,220/PPM);
		bdef.type = BodyType.DynamicBody;
		barrier = world.createBody(bdef);
		
		shape.setAsBox(5/PPM,5/PPM);
		fdef.shape = shape;
		fdef.filter.categoryBits = B2DVars.BIT_BARRIER;
//		fdef.filter.maskBits = B2DVars.BIT_GROUND | B2DVars.BIT_PLAYER;
		barrier.createFixture(fdef).setUserData("Whaaaaaaaaat");
		

		
		b2dcam = new OrthographicCamera();
		b2dcam.setToOrtho(false,Game.V_WIDTH/PPM,Game.V_HEIGHT/PPM);
		
		
		
		
	}

	public void handelInput() {

		
		if(MyInput.isPresses(MyInput.UPArrow)){
			if(cl.isPlayerOnGround()){
				playerBody.applyForceToCenter(0, 150, true);
			}
		}
		if(MyInput.isDown(MyInput.RIGHTArrow)){
				
				playerBody.applyForceToCenter(0,0,true);
				b2dcam.translate(i++/PPM, 0);
				b2dcam.update();
				System.out.println("Came here  and "+b2dcam.position+" i = "+i);
				
		}
		
		if(MyInput.isDown(MyInput.LEFTArrow)){
			playerBody.applyForceToCenter(0,0,true);
			b2dcam.translate(i--/PPM, 0);
			b2dcam.update();
			System.out.println("Came here  and "+b2dcam.position+" i = "+i);
	}
		
	}
	
	public void update(float dt) {
		this.handelInput();
		world.step(dt, 6,2);
	}
	
	public void render() {
		
		//Clear screen
		Gdx.gl10.glClear(GL10.GL_COLOR_BUFFER_BIT);
		
		b2dr.render(world, b2dcam.combined);
	}
	
	public void dispose() {}
	
	

}
